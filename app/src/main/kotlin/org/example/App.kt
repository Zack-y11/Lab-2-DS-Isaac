/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example
import org.example.common.ControlOrders
import org.example.common.CustomList
import org.example.common.Pupusa
import java.util.*
import org.example.common.InputValidator


fun main() {
    val controlOrders = ControlOrders()
    val scanner = Scanner(System.`in`)
    val validator = InputValidator()

    while (true) {
        println(
            """
                Bienvenido a la Pupuseria "El Comalito"
                Seleccione una opcion:
                1. Registrar Orden
                2. Ver Ordenes pendientes
                3. Despachar Orden
                4. Ver ordenes despachadas
                5. Salir
            """.trimIndent())

        try {
            val option = scanner.nextInt()
            validator.validateRange(option, "Option", 1,5)

            when (option) {
                1 -> {
                    println("Ingrese el nombre del cliente: ")
                    val cliente = readLine()!!
                    validator.validateNoNumbers(cliente, "El nombre no puede contener numeros")
                    validator.validateNonEmpty(cliente, "Nombre del cliente")
                    println("Cuantos tipos de pupusa desea ordenar?")
                    val tiposPupusas = scanner.nextInt()
                    validator.positiveNumber(tiposPupusas, "Cantidad de pupusa")
                    val pupusas = CustomList<Pupusa>()
                    for(i in 1..tiposPupusas){
                        println("Ingrese el tipo de pupusa #$i")
                        val tipo = readLine()!!
                        validator.validateNonEmpty(tipo, "Tipo de pupusa")
                        println("Ingrese la cantidad de pupusas de $tipo")
                        val cantidad = scanner.nextInt()
                        validator.positiveNumber(cantidad, "Cantidad de pupusa")
                        pupusas.add(Pupusa(tipo, cantidad))
                    }
                    controlOrders.registerOrder(cliente, pupusas)
                }
                2 -> controlOrders.showOrders()
                3 -> controlOrders.dispatchedOrder()
                4 -> controlOrders.showDispatchedOrder()
                5 -> {
                    println("Saliendo del sistema")
                    return
                }
                else -> println("Opcion invalida")
            }
        }catch (e: IllegalArgumentException) {
            println("Error: ${e.message}")
        } catch (e: InputMismatchException) {
            println("Error: Entrada no válida. Por favor, ingrese un número.")
            scanner.nextLine()
        } catch (e: Exception) {
            println("Error inesperado: ${e.message}")
        }
    }

}
